package com.visa.inappsdk.common;

import android.app.Application;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build;

import com.visa.inappsdk.datamodel.SDKGateway;

import java.lang.ref.WeakReference;

/**
 * This class initialize SDK and provides for in Context, that will be used all
 * over the SDK.
 * 
 * Created by fzubair on 10/13/2015.
 */
public final class SDKCore {
	
	private static final String SDK_VERSION = "1.0.0";

	private static WeakReference<Context> context;

	/** DeviceID generated by getDeviceID method. */
	private static String deviceID = null;

	/**
	 * Initializes mPOS SDK. Saves <code>Context</code> to be used by settings
	 * and card reader drivers.
	 * 
	 * @param ctx the application <code>Context</code>
	 */
	public static void initialize(WeakReference<Context> ctx) {
		context = ctx;
	}

	public static WeakReference<Context> getContext() {
		return context;
	}

	/**
	 * @return the version of this SDK
	 */
	public static String getSDKVersion() {
		return SDK_VERSION;
	}

	/**
	 * @return the version of Application which is using this SDK
	 */
	public static String getAppVersion() {
		try {
			PackageInfo pInfo = context.get().getPackageManager().getPackageInfo(context.get().getPackageName(), 0);
			return pInfo.versionName;
		} catch (NameNotFoundException e) {
			return "UNKNOWN";
		}
	}

	/**
	 * @return Platform name + version of it.
	 */
	public static String getDevicePlatform() {
		return "Android_" + Build.VERSION.RELEASE;
	}

	/**
	 * @return Unique device ID
	 */
	public static String getDeviceId() {

		// if deviceID was generated already do not regenerate it
		if (deviceID != null) {
			return deviceID;
		}
		
		try {
			// generate deviceID with InAuth library
			//deviceID = InauthWB.getPersistentInauthId();

            // Changed TO //

            // if InAuth library is missing get deviceID from OS
            if (Build.SERIAL != null) {
                String serial = Build.SERIAL;
                serial = serial.toLowerCase();
                deviceID = serial;
            } else {

                // we make this look like a valid IMEI
                String UID = "35" + Build.BOARD.length() % 10 + Build.BRAND.length() % 10 + Build.CPU_ABI.length() % 10
                        + Build.DEVICE.length() % 10 + Build.DISPLAY.length() % 10 + Build.HOST.length() % 10
                        + Build.ID.length() % 10 + Build.MANUFACTURER.length() % 10 + Build.MODEL.length() % 10
                        + Build.PRODUCT.length() % 10 + Build.TAGS.length() % 10 + Build.TYPE.length() % 10
                        + Build.USER.length() % 10; // 13 digits
                deviceID = UID;
            }


		} catch (Exception ex) {

			// if InAuth library is missing get deviceID from OS
			if (Build.SERIAL != null) {
                String serial = Build.SERIAL;
                serial = serial.toLowerCase();
                deviceID = serial;
			} else {

				// we make this look like a valid IMEI
				String UID = "35" + Build.BOARD.length() % 10 + Build.BRAND.length() % 10 + Build.CPU_ABI.length() % 10
						+ Build.DEVICE.length() % 10 + Build.DISPLAY.length() % 10 + Build.HOST.length() % 10
						+ Build.ID.length() % 10 + Build.MANUFACTURER.length() % 10 + Build.MODEL.length() % 10
						+ Build.PRODUCT.length() % 10 + Build.TAGS.length() % 10 + Build.TYPE.length() % 10
						+ Build.USER.length() % 10; // 13 digits
				deviceID = UID;
			}
		}
		
		return deviceID;
	}
}